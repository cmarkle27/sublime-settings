{
    "scope": "source.js -string -comment -constant",

    "completions": [ 
        "accessKey",
        "align",
        "alt",
        "appletName",
        "arguments",            // Local to a function
        "attributes",
        "background",           // Body/ Table D
        "baseURI",
        "bgColor",              // Body/ Document/ Table D
        "blur()",
        "body",
        "border",               // Image/ <object>/ Table D
        "childNodes",
        "className",
        "click()",
        "clientHeight",
        "clientWidth",
        "code",
        "constructor",
        "cssRules",
        "currentStyle",         // IE et al
        "dir",
        "disabled",
        "document",
        "firstChild",
        "focus()",
        "form",
        "frame",                // from the frames collection
        "hasAttributes()",
        "hasChildNodes()",
        "hash",
        "height",               // Table D
        "history",
        "href",
        "htmlFor",
        "id",
        "Infinity",
        "innerHTML",
        "innerText",
        "lang",
        "lastChild",
        "length",
        "localName",
        "location",
        "MAX_VALUE",
        "media",                // Link (may be used in future)
        "MIN_VALUE",
        "name",
        "namespaceURI",
        "NaN",
        "navigator",
        "NEGATIVE_INFINITY",
        "nextSibling",
        "nodeName",
        "nodeType",
        "nodeValue",
        "normalize()",
        "offsetHeight",         // NON spec
        "offsetLeft",
        "offsetParent",
        "offsetTop",
        "offsetWidth",
        "onblur",
        "onclick",
        "ondblclick",
        "onfocus",
        "onkeydown",
        "onkeypress",
        "onkeyup",
        "offline",              // Inconsistent support
        "online",               // Inconsistent support
        "onmousedown",
        "onmousemove",
        "onmouseout",
        "onmouseover",
        "onmouseup",
        "onscroll",
        "ownerDocument",
        "ownerNode",            // styleSheet
        "owningElement",        // IE lt9 (cf ownerNode)
        "parentNode",
        "POSITIVE_INFINITY",
        "prefix",
        "previousSibling",
        "prototype",
        "returnValue",
        "rules",                // css IE lt9
        "screen",
        "scrollHeight",
        "scrollLeft",
        "scrollTop",
        "scrollWidth",
        "select()",             // All inputs and TextArea
        "style",
        "styleSheets",
        "tabIndex",
        "tagName",
        "target",
        "text",
        "textContent",
        "title",
        "toJSON",
        "toLocaleString()",     // Date/ Number
        "toString()",
        "type",
        "value",
        "valueOf()",
        "width",
        "window",
        "XDomainRequest()",
        "XMLHttpRequest()",

        // Global functions/constructors
        { "trigger": "ActiveXObject()", "contents": "ActiveXObject(\"${1:Msxml2.XMLHTTP}\")" },
        { "trigger": "Date()", "contents": "Date()" },
        { "trigger": "Date(full)", "contents": "Date(${1:year}, ${2:month}, ${3:day}, ${4:hours}, ${5:minute}, ${6:seconds}, ${7:ms})" },
        { "trigger": "Date(ms)", "contents": "Date(${1:milliseconds})" },
        { "trigger": "Date(string)", "contents": "Date(${1:datestring})" },
        { "trigger": "decodeURI()", "contents": "decodeURI(${1:uri})" },
        { "trigger": "decodeURIComponent()", "contents": "decodeURIComponent(${1:s})" },
        { "trigger": "encodeURI()", "contents": "encodeURI(${1:uri})" },
        { "trigger": "encodeURIComponent()", "contents": "encodeURIComponent(${1:s})" },
        { "trigger": "escape()", "contents": "escape(${1:s})" },
        { "trigger": "eval()", "contents": "eval(${1:code})" },
        { "trigger": "Image()", "contents": "Image(${1:width}, ${2:height})" },
        { "trigger": "isFinite()", "contents": "isFinite(${1:n})" },
        { "trigger": "isNaN()", "contents": "isNaN(${1:x})" },
        { "trigger": "Number()", "contents": "Number(${1:value})" },
        { "trigger": "Option()", "contents": "Option(${1:[, text]}${2:[, value]}${3:[, defaultSelected]}${4:[, selected]})" },
        { "trigger": "parseFloat()", "contents": "parseFloat(${1:s})" },
        { "trigger": "parseInt()", "contents": "parseInt(${1:s}${2:[, radix]})" },
        { "trigger": "RegExp()", "contents": "RegExp(${1:pattern}${2:[, attributes]})" },
        { "trigger": "String()", "contents": "String(${1:s})" },
        { "trigger": "unescape()", "contents": "unescape(${1:s})" },

        // Global (Object) properties and methods
        { "trigger": "hasOwnProperty()", "contents": "hasOwnProperty(${1:propname})" },
        { "trigger": "isPrototypeOf()", "contents": "isPrototypeOf(${1:obj})" },
        { "trigger": "propertyIsEnumerable()", "contents": "propertyIsEnumerable(${1:propname})" },
        { "trigger": "toString(radix)", "contents": "toString(${1:[radix]})" },

        // Miscellaneous
        "arguments.callee",     // local to a function
        "arguments.length",
        { "trigger": "arguments[]", "contents": "arguments[${2:n}]" },
        { "trigger": "createHTMLDocument() DOMImplementation", "contents": "createHTMLDocument(${1:title})" },
        { "trigger": "hasFeature() DOMImplementation", "contents": "hasFeature(${1:feature}, ${2:version})" },

        // Element/ Node methods
        { "trigger": "addEventListener()", "contents": "addEventListener(${2:event}, ${3:listener}, ${4:useCapture})" },
        { "trigger": "appendChild()", "contents": "appendChild(${2:newChild})" },
        { "trigger": "attachEvent() IE", "contents": "attachEvent(${2:eventType}, ${3:function})" },
        { "trigger": "attributes[]", "contents": "attributes[${2:index_or_name}]" },
        { "trigger": "childNodes[]", "contents": "childNodes[${2:index}]" },
        { "trigger": "cloneNode()", "contents": "cloneNode(${2:deep})" },
        { "trigger": "compareDocumentPosition()", "contents": "compareDocumentPosition(${2:node})" },
        { "trigger": "currentStyle[]", "contents": "currentStyle[${2:prop}]" },
        { "trigger": "detachEvent() IE", "contents": "detachEvent(${2:eventType}, ${3:function})" },
        { "trigger": "dispatchEvent()", "contents": "dispatchEvent(${2:eventObject})" },
        { "trigger": "getAttribute()", "contents": "getAttribute(${2:name})" },
        { "trigger": "getAttributeNode()", "contents": "getAttributeNode(${2:name})" },
        { "trigger": "getAttributeNodeNS()", "contents": "getAttributeNodeNS(${2:namespace}, ${3:localname})" },
        { "trigger": "getAttributeNS()", "contents": "getAttributeNS(${2:namespace}, ${3:localname})" },
        { "trigger": "getElementsByClassName()", "contents": "getElementsByClassName(${2:className})" },
        { "trigger": "getElementsByTagName()", "contents": "getElementsByTagName(${2:name})" },
        { "trigger": "getElementsByTagNameNS()", "contents": "getElementsByTagNameNS(${2:namespace}, ${3:localname})" },
        { "trigger": "getFeature()", "contents": "getFeature(${2:feature}, ${3:version})" },
        { "trigger": "getPropertyValue()", "contents": "getPropertyValue(${2:propertyName})" },
        { "trigger": "getPropertyCSSValue()", "contents": "getPropertyCSSValue(${2:propertyName})" },   // Not IE/Opera
        { "trigger": "getUserData()", "contents": "getUserData(${2:key})" },
        { "trigger": "hasAttribute()", "contents": "hasAttribute(${2:name})" },
        { "trigger": "hasAttributeNS()", "contents": "hasAttributeNS(${2:namespace}, ${3:localname})" },
        { "trigger": "insertBefore()", "contents": "insertBefore(${2:newChild}, ${3:refChild})" },
        { "trigger": "isDefaultNamespace()", "contents": "isDefaultNamespace(${2:URI})" },
        { "trigger": "isEqualNode()", "contents": "isEqualNode(${2:node})" },
        { "trigger": "isSameNode()", "contents": "isSameNode(${2:node})" },
        { "trigger": "isSupported()", "contents": "isSupported(${2:feature}, ${3:version})" },
        { "trigger": "item()", "contents": "item(${2:index})" },
        { "trigger": "lookupNamespaceURI()", "contents": "lookupNamespaceURI(${2:prefix})" },
        { "trigger": "lookupPrefix()", "contents": "lookupPrefix(${2:URI})" },
        { "trigger": "querySelector()", "contents": "querySelector(${2:selectors}${3:[, NSResolver]})" },
        { "trigger": "querySelectorAll()", "contents": "querySelectorAll(${2:selectors}${3:[, NSResolver]})" },
        { "trigger": "removeAttribute()", "contents": "removeAttribute(${2:name})" },
        { "trigger": "removeAttributeNode()", "contents": "removeAttributeNode(${2:oldAttr})" },
        { "trigger": "removeAttributeNS()", "contents": "removeAttributeNS(${2:namespace}, ${3:localname})" },
        { "trigger": "removeChild()", "contents": "removeChild(${2:oldChild})" },
        { "trigger": "removeEventListener()", "contents": "removeEventListener(${2:type}, ${3:listener}, ${4:useCapture})" },
        { "trigger": "removeProperty()", "contents": "removeProperty(${2:propertyName})" },
        { "trigger": "replaceChild()", "contents": "replaceChild(${2:newChild}, ${3:oldChild})" },
        { "trigger": "scrollIntoView()", "contents": "scrollIntoView(${2:[top]})" },
        { "trigger": "setAttribute()", "contents": "setAttribute(${2:name}, ${3:value}${4:[, iecaseflag]})" },
        { "trigger": "setAttributeNode()", "contents": "setAttributeNode(${2:newAttr})" },
        { "trigger": "setAttributeNS()", "contents": "setAttributeNS(${2:namespace}, ${3:qualifiedname}, ${4:value})" },
        { "trigger": "setProperty()", "contents": "setProperty(${2:propertyName}, ${3:propertyValue}, ${4:priority})" },
        { "trigger": "setUserData()", "contents": "setUserData(${2:key}, ${3:data}, ${4:handler})" },
        { "trigger": "supports()", "contents": "supports(${2:feature}${3:[, version]})" },

        { "trigger": "charset      Anchor Link", "contents": "charset" },
        { "trigger": "coords              Area", "contents": "coords" },
        { "trigger": "host                Link", "contents": "host" },
        { "trigger": "hostname            Link", "contents": "hostname" },
        { "trigger": "hreflang     Anchor Link", "contents": "hreflang" },
        { "trigger": "noHref              Area", "contents": "noHref" },
        { "trigger": "onselect            Area", "contents": "onselect" },
        { "trigger": "pathname            Link", "contents": "pathname" },
        { "trigger": "port           Area Link", "contents": "port" },
        { "trigger": "protocol       Area Link", "contents": "protocol" },
        { "trigger": "rel          Anchor Link", "contents": "rel" },
        { "trigger": "rev          Anchor Link", "contents": "rev" },
        { "trigger": "search         Area Link", "contents": "search" },
        { "trigger": "shape               Area", "contents": "shape" },
        { "trigger": "target              Link", "contents": "target" },

        { "trigger": "concat()           Array", "contents": "concat(${1:values})" },
        { "trigger": "every()            Array", "contents": "every(${2:testfunction}${3:[, thisobj]})" },
        { "trigger": "filter()           Array", "contents": "filter(${2:testfunction}${3:[, thisobj]})" },
        { "trigger": "foreach()          Array", "contents": "foreach(${2:testfunction}${3:[, thisobj]})" },
        { "trigger": "indexOf()          Array", "contents": "indexOf(${2:targetElement}${3:[, startIndex]})" },
        { "trigger": "join()             Array", "contents": "join(${2:separator})" },
        { "trigger": "lastIndexOf()      Array", "contents": "lastIndexOf(${2:targetElement}${3:[, startIndex]})" },
        { "trigger": "map()              Array", "contents": "map(${2:testfunction}${3:[, thisobj]})" },
        { "trigger": "pop()              Array", "contents": "pop()" },
        { "trigger": "push()             Array", "contents": "push(${2:values})" },
        { "trigger": "reverse()          Array", "contents": "reverse()" },
        { "trigger": "shift()            Array", "contents": "shift()" },
        { "trigger": "slice()            Array", "contents": "slice(${2:start}${3:[, end]})" },
        { "trigger": "some()             Array", "contents": "some(${2:testfunction}${3:[, thisobj]})" },
        { "trigger": "sort()             Array", "contents": "sort(${2:[orderfunc]})" },
        { "trigger": "splice()           Array", "contents": "splice(${2:start}${3:[, deleteCount]}${4:[, values]})" },
        { "trigger": "toSource()         Array", "contents": "toSource()" },
        { "trigger": "unshift()          Array", "contents": "unshift(${2:values})" },

        { "trigger": "isId                 Attr", "contents": "isId" },
        { "trigger": "getNamedItem().value Attr", "contents": "getNamedItem(${2:name}).value" },
        { "trigger": "ownerElement         Attr", "contents": "ownerElement" },
        { "trigger": "schemaTypeInfo       Attr", "contents": "schemaTypeInfo" },
        { "trigger": "specified            Attr", "contents": "specified" },

        { "trigger": "aLink               Body", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:body\\.)/}aLink" },
        { "trigger": "link                Body", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:body\\.)/}link" },
        { "trigger": "onafterprint        Body", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:body\\.)/}onafterprint" },
        { "trigger": "onbeforeprint       Body", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:body\\.)/}onbeforeprint" },
        { "trigger": "onload              Body", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:body\\.)/}onload" },
        { "trigger": "vLink               Body", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:body\\.)/}vLink" },

        { "trigger": "Boolean.toSource() Boolean", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Boolean\\.)/}toSource()" },

        // Canvas (mainly through 2DContext object)
        { "trigger": "arc()           Canvas 2", "contents": "arc(${2:x}, ${3:y}, ${4:radius}, ${5:startAngle}, ${6:endAngle}, ${7:anticlockwise})" },
        { "trigger": "arcTo()         Canvas 2", "contents": "arcTo(${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:radius})" },
        { "trigger": "beginPath()     Canvas 2", "contents": "beginPath()" },
        { "trigger": "bezierCurveTo() Canvas 2", "contents": "bezierCurveTo(${2:cp1x}, ${3:cp1y}, ${4:cp2x}, ${5:cp2y}, ${6:x}, ${7:y})" },
        { "trigger": "canvas          Canvas 2", "contents": "canvas" },
        { "trigger": "clearRect()     Canvas 2", "contents": "clearRect(${2:x}, ${3:y}, ${4:w}, ${5:h})" },
        { "trigger": "clip()          Canvas 2", "contents": "clip()" },
        { "trigger": "closePath()     Canvas 2", "contents": "closePath()" },
        { "trigger": "createImageData() Canvas 2", "contents": "createImageData(${2:sw}, ${3:sh})" },
        { "trigger": "createImageData(imagedata) Canvas 2", "contents": "createImageData(${2:imagedata})" },
        { "trigger": "createLinearGradient() Canvas 2", "contents": "createLinearGradient(${2:x0}, ${3:y0}, ${4:x1}, ${5:y1})" },
        { "trigger": "createRadialGradient() Canvas 2", "contents": "createRadialGradient(${2:x0}, ${3:y0}, ${4:r0}, ${5:x1}, ${6:y1}, ${7:r1})" },
        { "trigger": "createPattern() Canvas 2", "contents": "createPattern(${2:image}, ${3:repetition})" },
        { "trigger": "data    Canvas ImageData", "contents": "data" },
        { "trigger": "drawImage()     Canvas 2", "contents": "drawImage(${2:image}, ${3:dx}, ${4:dy}${5:[, dw]}${6:[, dh]})" },
        { "trigger": "drawImage(part) Canvas 2", "contents": "drawImage(${2:image}, ${3:sx}, ${4:sy}, ${5:sw}, ${6:sh}, ${7:dx}, ${8:dy}, ${9:dw}, ${10:dh})" },
        { "trigger": "fill()          Canvas 2", "contents": "fill()" },
        { "trigger": "fillRect()      Canvas 2", "contents": "fillRect(${2:x}, ${3:y}, ${4:w}, ${5:h})" },
        { "trigger": "fillStyle       Canvas 2", "contents": "fillStyle" },
        { "trigger": "fillText()      Canvas 2", "contents": "fillText(${2:text}, ${3:x}, ${4:y}${5:[, maxWidth]})" },
        { "trigger": "font            Canvas 2", "contents": "font" },
        { "trigger": "getContext()      Canvas", "contents": "getContext(\"2d\")" },
        { "trigger": "getImageData()  Canvas 2", "contents": "getImageData(${2:sx}, ${3:sy}, ${4:sw}, ${5:sh})" },
        { "trigger": "globalAlpha     Canvas 2", "contents": "globalAlpha" },
        { "trigger": "globalCompositeOperation Canvas 2", "contents": "globalCompositeOperation" },
        { "trigger": "isPointInPath() Canvas 2", "contents": "isPointInPath(${2:x}, ${3:y})" },
        { "trigger": "lineCap         Canvas 2", "contents": "lineCap" },
        { "trigger": "lineJoin        Canvas 2", "contents": "lineJoin" },
        { "trigger": "lineTo()        Canvas 2", "contents": "lineTo(${2:x}, ${3:y})" },
        { "trigger": "lineWidth       Canvas 2", "contents": "lineWidth" },
        { "trigger": "measureText()   Canvas 2", "contents": "measureText(${2:text})" },
        { "trigger": "miterLimit      Canvas 2", "contents": "miterLimit" },
        { "trigger": "moveTo()        Canvas 2", "contents": "moveTo(${2:x}, ${3:y})" },
        { "trigger": "putImageData()  Canvas 2", "contents": "putImageData(${2:imagedata}, ${3:dx}, ${4:dy}${5:[, dirtyX]}${6:[, dirtyY]}${7:[, dirtyWidth]}${8:[, dirtyHeight]})" },
        { "trigger": "quadraticCurveTo() Canvas 2", "contents": "quadraticCurveTo(${2:cpx}, ${3:cpy}, ${4:x}, ${5:y})" },
        { "trigger": "rect()          Canvas 2", "contents": "rect(${2:x}, ${3:y}, ${4:w}, ${5:h})" },
        { "trigger": "restore()       Canvas 2", "contents": "restore()" },
        { "trigger": "rotate()        Canvas 2", "contents": "rotate(${2:angle})" },
        { "trigger": "save()          Canvas 2", "contents": "save()" },
        { "trigger": "scale()         Canvas 2", "contents": "scale(${2:x}, ${3:y})" },
        { "trigger": "setTransform()  Canvas 2", "contents": "setTransform(${2:m11}, ${3:m12}, ${4:m21}, ${5:m22}, ${6:dx}, ${7:dy})" },
        { "trigger": "shadowBlur      Canvas 2", "contents": "shadowBlur" },
        { "trigger": "shadowColor     Canvas 2", "contents": "shadowColor" },
        { "trigger": "shadowOffsetX   Canvas 2", "contents": "shadowOffsetX" },
        { "trigger": "shadowOffsetY   Canvas 2", "contents": "shadowOffsetY" },
        { "trigger": "stroke()        Canvas 2", "contents": "stroke()" },
        { "trigger": "strokeRect()    Canvas 2", "contents": "strokeRect(${2:x}, ${3:y}, ${4:w}, ${5:h})" },
        { "trigger": "strokeStyle     Canvas 2", "contents": "strokeStyle" },
        { "trigger": "strokeText()    Canvas 2", "contents": "strokeText(${2:text}, ${3:x}, ${4:y}${5:[, maxWidth]})" },
        { "trigger": "textAlign       Canvas 2", "contents": "textAlign" },
        { "trigger": "textBaseLine    Canvas 2", "contents": "textBaseLine" },
        { "trigger": "translate()     Canvas 2", "contents": "translate(${2:x}, ${3:y})" },
        { "trigger": "transform()     Canvas 2", "contents": "transform(${2:m11}, ${3:m12}, ${4:m21}, ${5:m22}, ${6:dx}, ${7:dy})" },
        { "trigger": "toDataURL()       Canvas", "contents": "toDataURL(${2:[type]}, ${3:args})" },
        { "trigger": "addColorStop() CanvasGrad", "contents": "addColorStop(${2:offset}, ${3:color})" },

        // Static Date methods
        { "trigger": "parse()             Date", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Date\\.)/}parse(${1:datestring})" },
        { "trigger": "UTC()               Date", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Date\\.)/}UTC(${1:yr}, ${2:mon}${3:[, day]}${4:[, hr]}${5:[, min]}${6:[, sec]}${7:[, ms]})" },

        { "trigger": "getDate()", "contents": "getDate()" },
        { "trigger": "getDay()", "contents": "getDay()" },
        { "trigger": "getFullYear()", "contents": "getFullYear()" },
        { "trigger": "getHours()", "contents": "getHours()" },
        { "trigger": "getMilliseconds()", "contents": "getMilliseconds()" },
        { "trigger": "getMinutes()", "contents": "getMinutes()" },
        { "trigger": "getSeconds()", "contents": "getSeconds()" },
        { "trigger": "getTime()", "contents": "getTime()" },
        { "trigger": "getTimeZoneOffset()", "contents": "getTimeZoneOffset()" },
        { "trigger": "getUTCDate()", "contents": "getUTCDate()" },
        { "trigger": "getUTCDay()", "contents": "getUTCDay()" },
        { "trigger": "getUTCFullYear()", "contents": "getUTCFullYear()" },
        { "trigger": "getUTCHours()", "contents": "getUTCHours()" },
        { "trigger": "getUTCMilliseconds()", "contents": "getUTCMilliseconds()" },
        { "trigger": "getUTCMinutes()", "contents": "getUTCMinutes()" },
        { "trigger": "getUTCMonth()", "contents": "getUTCMonth()" },
        { "trigger": "getUTCSeconds()", "contents": "getUTCSeconds()" },
        { "trigger": "getYear()", "contents": "getYear()" },
        { "trigger": "setDate()", "contents": "setDate(${1:day_of_month})" },
        { "trigger": "setFullYear()", "contents": "setFullYear(${2:year}${3:[, month]}${4:[, day]})" },
        { "trigger": "setHours()", "contents": "setHours(${2:hours}${3:[, mins]}${4:[, secs]}${5:[, ms]})" },
        { "trigger": "setMilliseconds()", "contents": "setMilliseconds(${2:millis})" },
        { "trigger": "setMinutes()", "contents": "setMinutes(${2:minutes}${3:[, seconds]}${4:[, millisec]})" },
        { "trigger": "setMonth()", "contents": "setMonth(${2:month}${3:[, day]})" },
        { "trigger": "setSeconds()", "contents": "setSeconds(${2:seconds}${3:[, millis]})" },
        { "trigger": "setTime()", "contents": "setTime(${2:milliseconds})" },
        { "trigger": "setUTCDate()", "contents": "setUTCDate(${2:day_of_month})" },
        { "trigger": "setUTCDay()", "contents": "setUTCDay(${2:value})" },
        { "trigger": "setUTCFullYear()", "contents": "setUTCFullYear(${2:year}${3:[, month]}${4:[, day]})" },
        { "trigger": "setUTCHours()", "contents": "setUTCHours(${2:hours}${3:[, mins]}${4:[, secs]}${5:[, ms]})" },
        { "trigger": "setUTCMinutes()", "contents": "setUTCMinutes(${2:minutes}${3:[, seconds]}${4:[, millisec]})" },
        { "trigger": "setUTCMonth()", "contents": "setUTCMonth(${2:month}${3:[, day]})" },
        { "trigger": "setUTCSeconds()", "contents": "setUTCSeconds(${2:seconds}${3:[, millis]})" },
        { "trigger": "setUTCMilliseconds()", "contents": "setUTCMilliseconds(${2:millis})" },
        { "trigger": "setYear()", "contents": "setYear(${2:year})" },
        { "trigger": "toDateString()", "contents": "toDateString()" },
        { "trigger": "toGMTString()", "contents": "toGMTString()" },
        { "trigger": "toTimeString()", "contents": "toTimeString()" },
        { "trigger": "toUTCString()", "contents": "toUTCString()" },
        { "trigger": "toLocaleDateString()", "contents": "toLocaleDateString()" },
        { "trigger": "toLocaleTimeString()", "contents": "toLocaleTimeString()" },

        { "trigger": "alinkColor      Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}alinkColor" },
        { "trigger": "anchors[]       Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}anchors[${2:index_or_name}]" },
        { "trigger": "anchors         Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}anchors" },
        { "trigger": "applets[]       Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}applets[${2:index_or_name}]" },
        { "trigger": "applets         Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}applets" },
        { "trigger": "body            Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}body" },
        { "trigger": "close()         Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}close()" },
        { "trigger": "compatMode      Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}compatMode" },
        { "trigger": "cookie          Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}cookie" },
        { "trigger": "createAttribute() Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}createAttribute(${2:name})" },
        { "trigger": "createComment() Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}createComment(${2:text})" },
        { "trigger": "createDocumentFragment() Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}createDocumentFragment()" },
        { "trigger": "createElement() Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}createElement(${2:tagName})" },
        { "trigger": "createTextNode() Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}createTextNode(${2:text})" },
        { "trigger": "defaultView     Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}defaultView" },
        { "trigger": "documentElement (html) Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}documentElement" },
        { "trigger": "documentMode IE8 Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}documentMode" },
        { "trigger": "domain          Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}domain" },
        { "trigger": "embeds[]        Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}embeds[${2:index}]" },
        { "trigger": "embeds          Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}embeds" },
        { "trigger": "execCommand() IE Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}execCommand(\"${2:Stop}\")" },
        { "trigger": "fgColor         Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}fgColor" },
        { "trigger": "fileSize IE     Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}fileSize" },
        { "trigger": "forms[]         Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}forms[${2:name_or_number}]" },
        { "trigger": "forms           Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}forms" },
        { "trigger": "getElementById() Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}getElementById(${2:id})" },
        { "trigger": "getElementsByName() Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}getElementsByName(${2:name})" },
        { "trigger": "getElementsByTagName() Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}getElementsByTagName(${2:tagname})" },
        { "trigger": "images[]        Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}images[${2:index_or_name}]" },
        { "trigger": "images          Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}images" },
        { "trigger": "implementation  Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}implementation" },
        { "trigger": "importNode()    Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}importNode(${2:importedNode}${3:[, deep]})" },
        { "trigger": "lastModified    Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}lastModified" },
        { "trigger": "linkColor       Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}linkColor" },
        { "trigger": "links[]         Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}links[${2:i}]" },
        { "trigger": "links           Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}links" },
        { "trigger": "open()          Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}open(${2:[mimetype]}${3:[, replace]})" },
        { "trigger": "plugins[]       Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}plugins[${2:index}]" },
        { "trigger": "plugins         Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}plugins" },
        { "trigger": "readyState      Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}readyState" },
        { "trigger": "referrer        Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}referrer" },
        { "trigger": "styleSheets[]   Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}styleSheets[${2:arg}]" },
        { "trigger": "title           Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}title" },
        { "trigger": "URL             Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}URL" },
        { "trigger": "write()         Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}write(${2:string})" },
        { "trigger": "writeln()       Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}writeln(${2:string})" },
        { "trigger": "vlinkColor      Document", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:document\\.)/}vlinkColor" },

        { "trigger": "button             Event", "contents": "button" },
        { "trigger": "cancelBubble IE    Event", "contents": "cancelBubble" },
        { "trigger": "clientX            Event", "contents": "clientX" },
        { "trigger": "clientY            Event", "contents": "clientY" },
        { "trigger": "currentTarget      Event", "contents": "currentTarget" },
        { "trigger": "fromElement IE     Event", "contents": "fromElement" },
        { "trigger": "keyCode            Event", "contents": "keyCode" },
        { "trigger": "pageX              Event", "contents": "pageX" },
        { "trigger": "pageY              Event", "contents": "pageY"},
        { "trigger": "preventDefault     Event", "contents": "preventDefault" },
        { "trigger": "preventDefault()   Event", "contents": "preventDefault()" },
        { "trigger": "relatedTarget      Event", "contents": "relatedTarget" },
        { "trigger": "srcElement         Event", "contents": "srcElement" },
        { "trigger": "stopPropagation()  Event", "contents": "stopPropagation()" },
        { "trigger": "target             Event", "contents": "target" },
        { "trigger": "toElement IE       Event", "contents": "toElement" },
        { "trigger": "type               Event", "contents": "type" },
        { "trigger": "which              Event", "contents": "which" },

        { "trigger": "acceptCharset       Form", "contents": "acceptCharset" },
        { "trigger": "action              Form", "contents": "action" },
        { "trigger": "elements[]          Form", "contents": "elements[${2:index_or_name}]" },
        { "trigger": "elements            Form", "contents": "elements" },
        { "trigger": "encoding            Form", "contents": "encoding" },
        { "trigger": "enctype             Form", "contents": "enctype" },
        { "trigger": "method              Form", "contents": "method" },
        { "trigger": "onreset             Form", "contents": "onreset" },
        { "trigger": "onsubmit            Form", "contents": "onsubmit" },
        { "trigger": "reset()             Form", "contents": "reset()" },
        { "trigger": "submit()            Form", "contents": "submit()" },

        { "trigger": "clearInterval()    Frame", "contents": "clearInterval(${2:id})" },
        { "trigger": "clearTimeout()     Frame", "contents": "clearTimeout(${2:id})" },
        { "trigger": "contentDocument    Frame", "contents": "contentDocument" },
        { "trigger": "contentWindow      Frame", "contents": "contentWindow" },     // NON spec
        { "trigger": "frameBorder        Frame", "contents": "frameBorder" },
        { "trigger": "frames             Frame", "contents": "frames" },
        { "trigger": "frames[]           Frame", "contents": "frames[${2:ref}]" },
        { "trigger": "longDesc           Frame", "contents": "longDesc" },
        { "trigger": "marginHeight       Frame", "contents": "marginHeight" },
        { "trigger": "marginWidth        Frame", "contents": "marginWidth" },
        { "trigger": "noResize           Frame", "contents": "noResize" },
        { "trigger": "onbeforeunload     Frame", "contents": "onbeforeunload" },
        { "trigger": "onresize          IFrame", "contents": "onresize" },
        { "trigger": "onunload          IFrame", "contents": "onunload" },
        { "trigger": "parent             Frame", "contents": "parent" },
        { "trigger": "scrolling          Frame", "contents": "scrolling" },
        { "trigger": "self               Frame", "contents": "self" },
        { "trigger": "setInterval()      Frame", "contents": "setInterval(${2:func}, ${3:interval}${4:[, args]})" },
        { "trigger": "setTimeout()       Frame", "contents": "setTimeout(${2:func}, ${3:delay}${4:[, lang]})" },
        { "trigger": "src                Frame", "contents": "src" },

        { "trigger": "cols            Frameset", "contents": "cols" },
        { "trigger": "frameBorder     Frameset", "contents": "cols" },
        { "trigger": "onload          Frameset", "contents": "onload" },
        { "trigger": "rows            Frameset", "contents": "rows" },

        // Function properties and methods
        { "trigger": "apply()             Func", "contents": "apply(${2:thisobj}${3:[, args]})" },
        { "trigger": "call()              Func", "contents": "call(${2:thisobj}${3:[, args]})" },
        { "trigger": "caller D            Func", "contents": "caller" },

        { "trigger": "back()              Hist", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:history\\.)/}back()" },
        { "trigger": "go()                Hist", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:history\\.)/}go(${2:n})" },
        { "trigger": "forward()           Hist", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:history\\.)/}forward()" },

        { "trigger": "complete           Image", "contents": "complete" },
        { "trigger": "fileSize IE        Image", "contents": "fileSize" },
        { "trigger": "hspace             Image", "contents": "hspace" },
        { "trigger": "longDesc           Image", "contents": "longDesc" },
        { "trigger": "lowsrc             Image", "contents": "lowsrc" },      // NON spec
        { "trigger": "onabort            Image", "contents": "onabort" },
        { "trigger": "onerror            Image", "contents": "onerror" },
        { "trigger": "onload             Image", "contents": "onload " },
        { "trigger": "src                Image", "contents": "src" },         // NON spec
        { "trigger": "useMap             Image", "contents": "useMap" },
        { "trigger": "vspace             Image", "contents": "vspace" },

        { "trigger": "accept             Input", "contents": "accept" },      // FileUpload
        { "trigger": "checked            Input", "contents": "checked" },
        { "trigger": "defaultChecked     Input", "contents": "defaultChecked" },
        { "trigger": "defaultValue       Input", "contents": "defaultValue" },
        { "trigger": "maxLength          Input", "contents": "maxLength" },
        { "trigger": "onchange           Input", "contents": "onchange" },
        { "trigger": "onselect           Input", "contents": "onselect" },
        { "trigger": "readOnly           Input", "contents": "readOnly" },
        { "trigger": "size               Input", "contents": "size" },

        // Static JSON methods
        { "trigger": "stringify()         JSON", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:JSON\\.)/}stringify(${1:object}${2:[, replacer]}${3:[, space]})" },
        { "trigger": "parse()             JSON", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:JSON\\.)/}parse(${1:string}${2:[, reviver]})" },

        { "trigger": "host            Location", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:location\\.)/}host" },
        { "trigger": "hostname        Location", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:location\\.)/}hostname" },
        { "trigger": "pathname        Location", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:location\\.)/}pathname" },
        { "trigger": "port            Location", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:location\\.)/}port" },
        { "trigger": "protocol        Location", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:location\\.)/}protocol" },
        { "trigger": "reload()        Location", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:location\\.)/}reload(${2:[forceGet]})" },
        { "trigger": "replace()       Location", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:location\\.)/}replace(${2:url})" },
        { "trigger": "search          Location", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:location\\.)/}search" },

        { "trigger": "Math.abs()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}abs(${1:x})" },
        { "trigger": "Math.acos()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}acos(${1:x})" },
        { "trigger": "Math.asin()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}asin(${1:x})" },
        { "trigger": "Math.atan()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}atan(${1:x})" },
        { "trigger": "Math.atan2()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}atan2(${1:y},${2:x})" },
        { "trigger": "Math.ceil()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}ceil(${1:x})" },
        { "trigger": "Math.cos()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}cos(${1:x})" },
        { "trigger": "Math.E", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}E" },
        { "trigger": "Math.exp()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}exp(${1:x})" },
        { "trigger": "Math.floor()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}floor(${1:x})" },
        { "trigger": "Math.LN10", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}LN10" },
        { "trigger": "Math.LN2", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}LN2" },
        { "trigger": "Math.log()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}log(${1:x})" },
        { "trigger": "Math.LOG10E", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}LOG10E" },
        { "trigger": "Math.LOG2E", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}ELOG2E" },
        { "trigger": "Math.max()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}max(${1:args})" },
        { "trigger": "Math.min()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}min(${1:args})" },
        { "trigger": "Math.PI", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}PI" },
        { "trigger": "Math.pow()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}pow(${1:x},${2:y})" },
        { "trigger": "Math.random()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}random()" },
        { "trigger": "Math.round()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}round(${1:x})" },
        { "trigger": "Math.sin()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}sin(${1:x})" },
        { "trigger": "Math.sqrt()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}sqrt(${1:x})" },
        { "trigger": "Math.SQRT1_2", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}SQRT1_2" },
        { "trigger": "Math.SQRT2", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}SQRT2" },
        { "trigger": "Math.tan()", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Math\\.)/}tan(${1:x})" },

        { "trigger": "charset             Meta", "contents": "charset" },
        { "trigger": "content             Meta", "contents": "content" },
        { "trigger": "httpEquiv           Meta", "contents": "httpEquiv" },
        { "trigger": "scheme              Meta", "contents": "scheme" },

        { "trigger": "appCodeName        Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}appCodeName" },
        { "trigger": "appName            Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}appName" },
        { "trigger": "appVersion         Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}appVersion" },
        { "trigger": "cookieEnabled      Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}cookieEnabled" },
        { "trigger": "javaEnabled        Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}javaEnabled${1:()}" },
        { "trigger": "language FF        Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}language" },
        { "trigger": "mimeTypes[] FF     Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}mimeTypes[$1]" },
        { "trigger": "mimeTypes FF       Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}mimeTypes" },
        { "trigger": "onLine HTML5       Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}onLine" },
        { "trigger": "platform           Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}platform" },
        { "trigger": "plugins FF         Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}plugins" },
        { "trigger": "plugins[] FF       Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}plugins[$1]" },
        { "trigger": "plugins.refresh() FF Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}plugins.refresh(${1:[reload]})" },
        { "trigger": "systemLanguage IE  Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}systemLanguage" },
        { "trigger": "userAgent          Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}userAgent" },
        { "trigger": "userLanguage IE    Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}userLanguage" },
        { "trigger": "vendor             Navig", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:navigator\\.)/}vendor" },

        { "trigger": "toExponential()   Number", "contents": "toExponential(${2:digits})" },
        { "trigger": "toFixed()         Number", "contents": "toFixed(${2:digits})" },
        { "trigger": "toPrecision()     Number", "contents": "toPrecision(${2:precision})" },
        { "trigger": "MAX_VALUE         Number", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Number\\.)/}MAX_VALUE" },
        { "trigger": "MIN_VALUE         Number", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Number\\.)/}MIN_VALUE" },
        { "trigger": "NaN               Number", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Number\\.)/}NaN" },
        { "trigger": "NEGATIVE_INFINITY Number", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Number\\.)/}NEGATIVE_INFINITY" },
        { "trigger": "POSITIVE_INFINITY Number", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Number\\.)/}POSITIVE_INFINITY" },

        // Static Object methods
        { "trigger": "getOwnPropertyNames() Object", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Object\\.)/}getOwnPropertyNames(${1:obj})" },
        { "trigger": "keys()            Object", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:Object\\.)/}keys(${1:obj})" },

        { "trigger": "archive         <object>", "contents": "archive" },
        { "trigger": "code            <object>", "contents": "code" },
        { "trigger": "codeBase        <object>", "contents": "codeBase" },
        { "trigger": "codeType        <object>", "contents": "codeType" },
        { "trigger": "data            <object>", "contents": "data" },
        { "trigger": "declare         <object>", "contents": "declare" },
        { "trigger": "hspace          <object>", "contents": "hspace" },
        { "trigger": "standby         <object>", "contents": "standby" },
        { "trigger": "useMap          <object>", "contents": "useMap" },
        { "trigger": "vspace          <object>", "contents": "vspace" },

        { "trigger": "defaultSelected   Option", "contents": "defaultSelected" },
        { "trigger": "index             Option", "contents": "index" },     
        { "trigger": "selected          Option", "contents": "selected" },

        { "trigger": "compile()         RegExp", "contents": "compile(${2:regexp}${3:, modifier})" },
        { "trigger": "exec()            RegExp", "contents": "exec(${2:string})" },
        { "trigger": "global            RegExp", "contents": "$(1:obj}.global" },
        { "trigger": "ignoreCase        RegExp", "contents": "ignoreCase" },
        { "trigger": "lastIndex         RegExp", "contents": "lastIndex" },
        { "trigger": "multiline         RegExp", "contents": "multiline" },
        { "trigger": "source            RegExp", "contents": "source" },
        { "trigger": "test()            RegExp", "contents": "test(${2:string})" },

        { "trigger": "availHeight       Screen", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:screen\\.)/}availHeight" },
        { "trigger": "availWidth        Screen", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:screen\\.)/}availWidth" },
        { "trigger": "colorDepth        Screen", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:screen\\.)/}colorDepth" },
        { "trigger": "pixelDepth FF     Screen", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:screen\\.)/}pixelDepth" },

        { "trigger": "add()             Select", "contents": "add(${2:new}, ${3:before})" },
        { "trigger": "multiple          Select", "contents": "multiple" },
        { "trigger": "onchange          Select", "contents": "onchange" },
        { "trigger": "options[]         Select", "contents": "options[${2:index}]" },
        { "trigger": "options           Select", "contents": "options" },
        { "trigger": "remove()          Select", "contents": "remove(${2:optionindex})" },
        { "trigger": "selectedIndex     Select", "contents": "selectedIndex" },
        { "trigger": "size              Select", "contents": "size" },

        // Static String method
        { "trigger": "fromCharCode()    String", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:String\\.)/}fromCharCode(${1:chars})" },

        // String methods
        { "trigger": "anchor()          String", "contents": "${1:string}.anchor(${2:name})" },
        { "trigger": "big()             String", "contents": "${1:string}.big()" },
        { "trigger": "blink()           String", "contents": "${1:string}.blink()" },
        { "trigger": "bold()            String", "contents": "${1:string}.bold()" },
        { "trigger": "charAt()          String", "contents": "charAt(${1:n})" },
        { "trigger": "charCodeAt()      String", "contents": "charCodeAt(${1:n})" },
        { "trigger": "concat()          String", "contents": "concat(${1:strings})" },
        { "trigger": "fixed()           String", "contents": "${1:string}.fixed()" },
        { "trigger": "fontcolor()       String", "contents": "${1:string}.fontcolor(${2:color})" },
        { "trigger": "fontsize()        String", "contents": "${1:string}.fontsize(${2:size})" },
        { "trigger": "indexOf()         String", "contents": "indexOf(${1:substr}${2:[, start]})" },
        { "trigger": "italics()         String", "contents": "${1:string}.italics()" },
        { "trigger": "lastIndexOf()     String", "contents": "lastIndexOf(${1:substr}${2:[, start]})" },
        { "trigger": "link()            String", "contents": "${1:string}.link(${2:url})" },
        { "trigger": "localeCompare()   String", "contents": "localeCompare()" },
        { "trigger": "match()           String", "contents": "match(${1:regexp})" },
        { "trigger": "replace()         String", "contents": "replace(${1:regexp}${2:[, replacement]})" },
        { "trigger": "search()          String", "contents": "search(${1:regexp})" },
        { "trigger": "slice()           String", "contents": "slice(${1:start}${2:[, end]})" },
        { "trigger": "small()           String", "contents": "${1:string}.small()" },
        { "trigger": "split()           String", "contents": "split(${1:delimiter}${2:[, limit]})" },
        { "trigger": "strike()          String", "contents": "${1:string}.strike()" },
        { "trigger": "sub()             String", "contents": "${1:string}.sub()" },
        { "trigger": "substring()       String", "contents": "substring(${1:from}${2:[, to]})" },
        { "trigger": "substr()          String", "contents": "substr(${1:start}${2:[, length]})" },
        { "trigger": "sup()             String", "contents": "${1:string}.sup()" },
        { "trigger": "toLowerCase()     String", "contents": "toLowerCase()" },
        { "trigger": "toUpperCase()     String", "contents": "toUpperCase()" },
        { "trigger": "trim()            String", "contents": "trim()" },
        
        { "trigger": "borderColorDark IE Table", "contents": "borderColorDark" },
        { "trigger": "borderColorLight IE Table", "contents": "borderColorLight" },
        { "trigger": "caption            Table", "contents": "caption" },
        { "trigger": "cellPadding        Table", "contents": "cellPadding" },
        { "trigger": "cellSpacing        Table", "contents": "cellSpacing" },
        { "trigger": "cells           Table TR", "contents": "cells" },
        { "trigger": "cells[]         Table TR", "contents": "cells[${2:index}]" },
        { "trigger": "cells.item()    Table TR", "contents": "cells.item(${2:index})" },
        { "trigger": "cells.namedItem() Table TR", "contents": "cells.namedItem(${2:id})" },
        { "trigger": "createCaption()    Table", "contents": "createCaption()" },
        { "trigger": "createTFoot()      Table", "contents": "createTFoot()" },
        { "trigger": "createTHead()      Table", "contents": "createTHead()" },
        { "trigger": "deleteCaption()    Table", "contents": "deleteCaption()" },
        { "trigger": "deleteCell()       Table", "contents": "${1:trObject}.deleteCell(${2:index})" },
        { "trigger": "deleteRow()        Table", "contents": "deleteRow(${2:index})" },
        { "trigger": "deleteTFoot()      Table", "contents": "deleteTFoot()" },
        { "trigger": "deleteTHead()      Table", "contents": "deleteTHead()" },
        { "trigger": "frame              Table", "contents": "frame" },
        { "trigger": "insertRow()        Table", "contents": "insertRow(${2:index})" },
        { "trigger": "moveRow()          Table", "contents": "moveRow(${2:fromIndex}, ${3:toIndex})" },
        { "trigger": "rows               Table", "contents": "rows" },
        { "trigger": "rows[]             Table", "contents": "rows[${2:index}]" },
        { "trigger": "rules              Table", "contents": "rules" },
        { "trigger": "summary            Table", "contents": "summary" },
        { "trigger": "tBodies            Table", "contents": "tBodies" },
        { "trigger": "tBodies[]          Table", "contents": "tBodies[${2:index}]" },
        { "trigger": "tFoot              Table", "contents": "tFoot" },
        { "trigger": "tHead              Table", "contents": "tHead" },

        { "trigger": "abbr                 TDH", "contents": "abbr" },
        { "trigger": "axis                 TDH", "contents": "axis" },
        { "trigger": "cellIndex            TDH", "contents": "cellIndex" },
        { "trigger": "ch                  TDHR", "contents": "ch" },
        { "trigger": "chOff               TDHR", "contents": "chOff" },
        { "trigger": "colSpan              TDH", "contents": "colSpan" },
        { "trigger": "headers              TDH", "contents": "headers" },
        { "trigger": "rowSpan              TDH", "contents": "rowSpan" },
        { "trigger": "vAlign              TDHR", "contents": "vAlign" },
        { "trigger": "rowSpan              TDH", "contents": "rowSpan" },

        { "trigger": "deleteCell()          TR", "contents": "deleteCell(${2:index})" },
        { "trigger": "insertCell()          TR", "contents": "insertCell(${2:index})" },
        { "trigger": "rowIndex              TR", "contents": "rowIndex" },
        { "trigger": "sectionRowIndex       TR", "contents": "sectionRowIndex" },

        { "trigger": "cols            TextArea", "contents": "cols" },
        { "trigger": "defaultValue    TextArea", "contents": "defaultValue" },
        { "trigger": "onchange        TextArea", "contents": "onchange" },
        { "trigger": "readOnly        TextArea", "contents": "readOnly" },
        { "trigger": "rows            TextArea", "contents": "rows" },

        { "trigger": "alert()           Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}alert(${2:message})" },
        { "trigger": "clearInterval()   Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}clearInterval(${2:id})" },
        { "trigger": "clearTimeout()    Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}clearTimeout(${2:id})" },
        { "trigger": "clipboardData IE  Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}clipboardData" },
        { "trigger": "close()           Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}close()" },
        { "trigger": "closed            Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}closed" },
        { "trigger": "confirm()         Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}confirm(${2:question})" },
        { "trigger": "defaultStatus     Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}defaultStatus" },
        { "trigger": "document          Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}document" },
        { "trigger": "event             Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}event" },
        { "trigger": "find() FF         Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}find(${2:string})" },
        { "trigger": "frames[]          Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}frames[${2:arg}]" },
        { "trigger": "frames            Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}frames" },
        { "trigger": "getComputedStyle  Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}getComputedStyle" },
        { "trigger": "getComputedStyle() Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}getComputedStyle(${2:elt}${3:[, pseudoElt]})" },
        { "trigger": "history           Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}history" },
        { "trigger": "home() FF         Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}home()" },
        { "trigger": "innerHeight       Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}innerHeight" },
        { "trigger": "innerWidth        Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}innerWidth" },
        { "trigger": "location          Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}location" },
        { "trigger": "moveBy()          Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}moveBy(${2:dx}, ${3:dy})" },
        { "trigger": "moveTo()          Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}moveTo(${2:x}, ${3:y})" },
        { "trigger": "onafterprint IE   Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}onafterprint" },
        { "trigger": "onbeforeprint IE  Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}onbeforeprint" },
        { "trigger": "onbeforeunload    Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}onbeforeunload" },
        { "trigger": "onclose NON spec  Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}onclose" },
        { "trigger": "onerror NON spec  Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}onerror" },
        { "trigger": "onload            Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}onload" },
        { "trigger": "onresize          Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}onresize" },
        { "trigger": "onscroll          Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}onscroll" },
        { "trigger": "onunload          Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}onunload" },
        { "trigger": "open()            Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}open(${2:url}${3:[, name]}${4:[, features]}${5:[, replace]})" },
        { "trigger": "opener            Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}opener" },
        { "trigger": "outerHeight       Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}outerHeight" },
        { "trigger": "outerWidth        Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}outerWidth" },
        { "trigger": "pageXOffset       Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}pageXOffset" },
        { "trigger": "pageYOffset       Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}pageYOffset" },
        { "trigger": "parent            Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}parent" },
        { "trigger": "print()           Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}print()" },
        { "trigger": "prompt()          Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}prompt(${2:message}${3:[, default]})" },
        { "trigger": "resizeBy()        Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}resizeBy(${2:dw}, ${3:dh})" },
        { "trigger": "resizeTo()        Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}resizeTo(${2:width}, ${3:height})" },
        { "trigger": "screen            Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}screen" },
        { "trigger": "screenLeft        Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}screenLeft" },
        { "trigger": "screenTop         Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}screenTop" },
        { "trigger": "screenX           Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}screenX" },
        { "trigger": "screenY           Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}screenY" },
        { "trigger": "scrollBy()        Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}scrollBy(${2:dx}, ${3:dy})" },
        { "trigger": "scrollTo()        Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}scrollTo(${2:x}, ${3:y})" },
        { "trigger": "scrollX           Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}scrollX" },
        { "trigger": "scrollY           Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}scrollY" },
        { "trigger": "self              Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}self" },
        { "trigger": "setInterval()     Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}setInterval(${2:func}, ${3:interval}${4:[, args]})" },
        { "trigger": "setTimeout()      Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}setTimeout(${2:func}, ${3:delay}${4:[, lang]})" },
        { "trigger": "status            Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}status" },
        { "trigger": "stop()            Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}stop()" },
        { "trigger": "top               Window", "contents": "${TM_CURRENT_WORD/\\.\\W*|(.*)/(?1:window\\.)/}top" },

        // Other events (check compatibility before use)
        "oncut", "oncontextmenu", "oncopy", "onhashchange",     // Body/ Window FF/IE
        { "trigger": "onmouseenter IE", "contents": "onmouseenter" },
        { "trigger": "onmouseleave IE", "contents": "onmouseleave" },
        { "trigger": "onmousewheel not FF", "contents": "onmousewheel" },
        "onoffline", "ononline",        // Body and Window (inconsistently supported)
        "onpaste", "onreadystatechange",

        // Standard CSS properties. Using an underscore, but could consider 'z' or 'css'.
        { "trigger": "_azimuth", "contents": "azimuth" },
        { "trigger": "_background", "contents": "background" },
        { "trigger": "_backgroundAttachment", "contents": "backgroundAttachment" },
        { "trigger": "_backgroundColor", "contents": "backgroundColor" },
        { "trigger": "_backgroundImage", "contents": "backgroundImage" },
        { "trigger": "_backgroundPosition", "contents": "backgroundPosition" },
        { "trigger": "_backgroundRepeat", "contents": "backgroundRepeat" },
        { "trigger": "_border", "contents": "border" },
        { "trigger": "_borderBottom", "contents": "borderBottom" },
        { "trigger": "_borderBottomColor", "contents": "borderBottomColor" },
        { "trigger": "_borderBottomStyle", "contents": "borderBottomStyle" },
        { "trigger": "_borderBottomWidth", "contents": "borderBottomWidth" },
        { "trigger": "_borderCollapse", "contents": "borderCollapse" },
        { "trigger": "_borderColor", "contents": "borderColor" },
        { "trigger": "_borderLeft", "contents": "borderLeft" },
        { "trigger": "_borderLeftColor", "contents": "borderLeftColor" },
        { "trigger": "_borderLeftStyle", "contents": "borderLeftStyle" },
        { "trigger": "_borderLeftWidth", "contents": "borderLeftWidth" },
        { "trigger": "_borderRight", "contents": "borderRight" },
        { "trigger": "_borderRightColor", "contents": "borderRightColor" },
        { "trigger": "_borderRightStyle", "contents": "borderRightStyle" },
        { "trigger": "_borderRightWidth", "contents": "borderRightWidth" },
        { "trigger": "_borderSpacing", "contents": "borderSpacing" },
        { "trigger": "_borderStyle", "contents": "borderStyle" },
        { "trigger": "_borderTop", "contents": "borderTop" },
        { "trigger": "_borderTopColor", "contents": "borderTopColor" },
        { "trigger": "_borderTopStyle", "contents": "borderTopStyle" },
        { "trigger": "_borderTopWidth", "contents": "borderTopWidth" },
        { "trigger": "_borderWidth", "contents": "borderWidth" },
        { "trigger": "_bottom", "contents": "bottom" },
        { "trigger": "_captionSide", "contents": "captionSide" },
        { "trigger": "_clear", "contents": "clear" },
        { "trigger": "_clip", "contents": "clip" },
        { "trigger": "_color", "contents": "color" },
        { "trigger": "_content", "contents": "content" },
        { "trigger": "_counterIncrement", "contents": "counterIncrement" },
        { "trigger": "_counterReset", "contents": "counterReset" },
        { "trigger": "_cssFloat", "contents": "cssFloat" },
        { "trigger": "_cue", "contents": "cue" },
        { "trigger": "_cueAfter", "contents": "cueAfter" },
        { "trigger": "_cueBefore", "contents": "cueBefore" },
        { "trigger": "_cursor", "contents": "cursor" },
        { "trigger": "_direction", "contents": "direction" },
        { "trigger": "_display", "contents": "display" },
        { "trigger": "_elevation", "contents": "elevation" },
        { "trigger": "_emptyCells", "contents": "emptyCells" },
        { "trigger": "_font", "contents": "font" },
        { "trigger": "_fontFamily", "contents": "fontFamily" },
        { "trigger": "_fontSizeAdjust", "contents": "fontSizeAdjust" },
        { "trigger": "_fontStretch", "contents": "fontStretch" },
        { "trigger": "_fontStyle", "contents": "fontStyle" },
        { "trigger": "_fontVariant", "contents": "fontVariant" },
        { "trigger": "_fontWeight", "contents": "fontWeight" },
        { "trigger": "_height", "contents": "height" },
        { "trigger": "_left", "contents": "left" },
        { "trigger": "_letterSpacing", "contents": "letterSpacing" },
        { "trigger": "_lineHeight", "contents": "lineHeight" },
        { "trigger": "_listStyle", "contents": "listStyle" },
        { "trigger": "_listStyleImage", "contents": "listStyleImage" },
        { "trigger": "_listStylePosition", "contents": "listStylePosition" },
        { "trigger": "_listStyleType", "contents": "listStyleType" },
        { "trigger": "_margin", "contents": "margin" },
        { "trigger": "_marginBottom", "contents": "marginBottom" },
        { "trigger": "_marginLeft", "contents": "marginLeft" },
        { "trigger": "_marginRight", "contents": "marginRight" },
        { "trigger": "_marginTop", "contents": "marginTop" },
        { "trigger": "_markerOffset", "contents": "markerOffset" },
        { "trigger": "_marks", "contents": "marks" },
        { "trigger": "_maxHeight", "contents": "maxHeight" },
        { "trigger": "_maxWidth", "contents": "maxWidth" },
        { "trigger": "_minHeight", "contents": "minHeight" },
        { "trigger": "_minWidth", "contents": "minWidth" },
        { "trigger": "_orphans", "contents": "orphans" },
        { "trigger": "_outline", "contents": "outline" },
        { "trigger": "_outlineColor", "contents": "outlineColor" },
        { "trigger": "_outlineStyle", "contents": "outlineStyle" },
        { "trigger": "_outlineWidth", "contents": "outlineWidth" },
        { "trigger": "_overflow", "contents": "overflow" },
        { "trigger": "_padding", "contents": "padding" },
        { "trigger": "_paddingBottom", "contents": "paddingBottom" },
        { "trigger": "_paddingLeft", "contents": "paddingLeft" },
        { "trigger": "_paddingRight", "contents": "paddingRight" },
        { "trigger": "_paddingTop", "contents": "paddingTop" },
        { "trigger": "_page", "contents": "page" },
        { "trigger": "_pageBreakAfter", "contents": "pageBreakAfter" },
        { "trigger": "_pageBreakBefore", "contents": "pageBreakBefore" },
        { "trigger": "_pageBreakInside", "contents": "pageBreakInside" },
        { "trigger": "_pause", "contents": "pause" },
        { "trigger": "_pauseAfter", "contents": "pauseAfter" },
        { "trigger": "_pauseBefore", "contents": "pauseBefore" },
        { "trigger": "_pitch", "contents": "pitch" },
        { "trigger": "_pitchRange", "contents": "pitchRange" },
        { "trigger": "_pitchDuring", "contents": "pitchDuring" },
        { "trigger": "_playDuring", "contents": "playDuring" },
        { "trigger": "_position", "contents": "position" },
        { "trigger": "_quotes", "contents": "quotes" },
        { "trigger": "_richness", "contents": "richness" },
        { "trigger": "_right", "contents": "right" },
        { "trigger": "_size", "contents": "size" },
        { "trigger": "_speak", "contents": "speak" },
        { "trigger": "_speakHeader", "contents": "speakHeader" },
        { "trigger": "_speakNumeral", "contents": "speakNumeral" },
        { "trigger": "_speakPunctuation", "contents": "speakPunctuation" },
        { "trigger": "_speechRate", "contents": "speechRate" },
        { "trigger": "_stress", "contents": "stress" },
        { "trigger": "_styleFloat IE", "contents": "styleFloat" },
        { "trigger": "_tableLayout", "contents": "tableLayout" },
        { "trigger": "_textAlign", "contents": "textAlign" },
        { "trigger": "_textDecoration", "contents": "textDecoration" },
        { "trigger": "_textIndent", "contents": "textIndent" },
        { "trigger": "_textShadow", "contents": "textShadow" },
        { "trigger": "_textTransform", "contents": "textTransform" },
        { "trigger": "_top", "contents": "top" },
        { "trigger": "_unicodeBidi", "contents": "unicodeBidi" },
        { "trigger": "_verticalAlign", "contents": "verticalAlign" },
        { "trigger": "_visibility", "contents": "visibility" },
        { "trigger": "_voiceFamily", "contents": "voiceFamily" },
        { "trigger": "_volume", "contents": "volume" },
        { "trigger": "_width", "contents": "width" },
        { "trigger": "_whiteSpace", "contents": "whiteSpace" },
        { "trigger": "_widows", "contents": "widows" },
        { "trigger": "_wordSpacing", "contents": "wordSpacing" },
        { "trigger": "_zIndex", "contents": "zIndex" }
    ]
}